import json
import os
import re
from datetime import datetime
import random as rd
from functools import partial

import pandas as pd
from PySide6.QtCore import QPropertyAnimation, QEasingCurve, QSize, Qt, QParallelAnimationGroup, QDate
from PySide6.QtGui import QIcon, QPixmap, QIntValidator, QTextDocument, QFont, QColor
from PySide6.QtPrintSupport import QPrinter
from PySide6.QtWidgets import (
    QPushButton, QFrame, QLabel, QFileDialog, QMessageBox, QSizePolicy, QCompleter, QTableWidgetItem, QDialog,
    QVBoxLayout, QLineEdit, QFormLayout, QComboBox, QHBoxLayout, QSpacerItem, QWidget, QButtonGroup, QGridLayout,
    QTableWidget, QHeaderView, QCheckBox, QCalendarWidget, QAbstractItemView
)
from matplotlib import pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

from libs.JsonFileFactory import JsonFileFactory
from models.Bill import Bill
from models.Customer import Customer
from models.DataConnector import DataConnector
from models.FulltimeEmployee import FullTimeEmployee
from models.Order import Order
from models.ParttimeEmployee import PartTimeEmployee
from models.Product import Product
from ui.MainWindow import Ui_MainWindow


class MainWindowExt(Ui_MainWindow):
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow  # L∆∞u l·∫°i MainWindow ƒë·ªÉ ƒëi·ªÅu khi·ªÉn
        self.setupSignalandSlot()
        self.dc = DataConnector()
        self.load_products()
        self.load_menu()
        self.load_employee_data()
        self.load_bieudo()
        self.show_chart_by_week()
        self.show_chart_by_month()
        self.display_total_customers()
        self.bill()
        self.display_total_revenue()
        '''self.load_employees()'''
        self.set_selected_button(self.pushButtonpageOder)
        self.stackedWidget.setCurrentWidget(self.pageOrder)
        self.setup_search_completer_product()
        self.setup_search_completer_employee()
        self.selected_product = None  # L∆∞u tr·ªØ s·∫£n ph·∫©m ƒëang ch·ªânh s·ª≠a
        self.selected_category_frame = None
        self.update_category_combobox()
        self.setup_filter_menu()
        # Kh·ªüi t·∫°o bi·∫øn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c
        self.start_date_str = ""
        self.end_date_str = ""
        self.tableWidgetChamCong.cellClicked.connect(self.update_attendance_status)
        self.status_list = ["Kh√¥ng c√≥ l·ªãch", "ƒêi l√†m", "Ngh·ªâ c√≥ ph√©p", "Ngh·ªâ kh√¥ng ph√©p"]
        self.color_list = [QColor("white"), QColor("green"), QColor("yellow"), QColor("red")]

        self.tableWidgetChamCong.setEditTriggers(QAbstractItemView.NoEditTriggers)


    def setupSignalandSlot(self):
        self.Btn_Toggle.clicked.connect(lambda: self.toggleMenu(250, True))

        self.pushButtonpageProduct.clicked.connect(lambda: self.change_page(self.pageProduct, self.pushButtonpageProduct))
        self.pushButtonpageOder.clicked.connect(lambda: self.change_page(self.pageOrder, self.pushButtonpageOder))
        self.pushButtonpageStatistics.clicked.connect(lambda: self.change_page(self.pageStatistics, self.pushButtonpageStatistics))
        self.pushButtonpageEmployee.clicked.connect(lambda: self.change_page(self.pageEmployee, self.pushButtonpageEmployee))
        self.pushButtonpageChamCong.clicked.connect(lambda: self.change_page(self.pageChamCong, self.pushButtonpageChamCong))

        self.pushButtonSave.clicked.connect(self.add_product)
        self.pushButtonAddEmployee.clicked.connect(self.add_employee)

        self.lineEditSearch.textChanged.connect(self.filter_products)
        self.lineEditSearchEmployee.textChanged.connect(self.filter_employees_table)

        self.pushButtonNew.clicked.connect(self.new_product)
        self.pushButtonDelete.clicked.connect(self.delete_product)

        self.pushButtonDeleteEmployee.clicked.connect(self.delete_employee)

        self.pushButton_printBill.clicked.connect(self.export_bill_pdf)
        self.pushButtonDiscount.clicked.connect(self.on_discount_button_clicked)

        self.pushButtonDetails_E.clicked.connect(self.show_schedule_dialog)
        self.pushButtonLoadChamCong.clicked.connect(self.load_attendance_data)

        self.pushButtonSave_Check.clicked.connect(self.save_attendance_to_excel)

    def show_window(self):
        self.MainWindow.show()

##################################################################################
########################### Thi·∫øt k·∫ø giao di·ªán ###################################
    def change_page(self, page, button):
        """Chuy·ªÉn trang v√† c·∫≠p nh·∫≠t n√∫t ƒë∆∞·ª£c ch·ªçn"""
        self.stackedWidget.setCurrentWidget(page)
        self.set_selected_button(button)

    def set_selected_button(self, selected_button):
        """C·∫≠p nh·∫≠t m√†u n·ªÅn v√† ch·ªØ c·ªßa n√∫t ƒë∆∞·ª£c ch·ªçn"""
        buttons = [
            self.pushButtonpageProduct,
            self.pushButtonpageOder,
            self.pushButtonpageEmployee,
            self.pushButtonpageStatistics,
            self.pushButtonpageChamCong,
        ]

        selected_style = """
            QPushButton {
                background-color: #763e32;  /* M√†u xanh d∆∞∆°ng */
                color: white;  /* Ch·ªØ tr·∫Øng */
                font-weight: bold;
                text-align: left;
                padding: 10px;
                border-radius: 5px;
                font-size: 14px;
            }
        """

        default_style = """
            QPushButton {
                background-color: none;
                color: black;
                text-align: left;
                padding: 10px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;  /* Th√™m d√≤ng n√†y ƒë·ªÉ in ƒë·∫≠m */
            }
        """

        for button in buttons:
            if button == selected_button:
                button.setStyleSheet(selected_style)
            else:
                button.setStyleSheet(default_style)

    def toggleMenu(self, maxWidth, enable):
        if enable:
            width = self.frame_left_menu.width()
            maxExtend = maxWidth
            standard = 70

            if width == standard:
                widthExtended = maxExtend
                self.pushButtonpageProduct.setText("Qu·∫£n l√Ω s·∫£n ph·∫©m")
                self.pushButtonpageOder.setText("Qu·∫£n l√Ω ƒë∆°n h√†ng")
                self.pushButtonpageEmployee.setText("Qu·∫£n l√Ω nh√¢n vi√™n")
                self.pushButtonpageChamCong.setText("Qu·∫£n l√Ω ch·∫•m c√¥ng")
                self.pushButtonpageStatistics.setText("Qu·∫£n l√Ω doanh thu")

                self.frame_toggle.setMaximumWidth(maxExtend)
                self.frame_toggle.setStyleSheet("""
                    background-color: #763e32;
                    border-top-right-radius: 10px; /* Bo tr√≤n g√≥c tr√™n */
                    border-bottom-right-radius: 10px; /* Bo tr√≤n g√≥c d∆∞·ªõi */
                    padding: 5px;
                """)
            else:
                widthExtended = standard
                self.pushButtonpageProduct.setText("")
                self.pushButtonpageOder.setText("")
                self.pushButtonpageEmployee.setText("")

                self.frame_toggle.setMaximumWidth(standard)
                self.frame_toggle.setStyleSheet("""
                    background-color: #763e32;
                    border-radius: 0px; /* Kh√¥ng bo tr√≤n khi thu nh·ªè */
                    padding: 5px;
                """)

            # üî• Animation cho frame_left_menu
            self.animation = QPropertyAnimation(self.frame_left_menu, b"minimumWidth")
            self.animation.setDuration(400)
            self.animation.setStartValue(width)
            self.animation.setEndValue(widthExtended)
            self.animation.setEasingCurve(QEasingCurve.InOutQuart)

            # üî• Animation cho frame_toggle (gi√∫p bo g√≥c m∆∞·ª£t h∆°n)
            self.animation_toggle = QPropertyAnimation(self.frame_toggle, b"minimumWidth")
            self.animation_toggle.setDuration(400)
            self.animation_toggle.setStartValue(width)
            self.animation_toggle.setEndValue(widthExtended)
            self.animation_toggle.setEasingCurve(QEasingCurve.InOutQuart)

            # üî• Ch·∫°y animation ƒë·ªìng th·ªùi
            self.anim_group = QParallelAnimationGroup()
            self.anim_group.addAnimation(self.animation)
            self.anim_group.addAnimation(self.animation_toggle)
            self.anim_group.start()

    def get_selected_style(self):
        """Tr·∫£ v·ªÅ style khi button ƒë∆∞·ª£c ch·ªçn (m√†u xanh, ch·ªØ tr·∫Øng)"""
        return """
            QPushButton {
                background-color: #763e32;  /* M√†u xanh d∆∞∆°ng */
                color: white;  /* Ch·ªØ tr·∫Øng */
                font-weight: bold;
                text-align: left;
                padding: 10px;
                border-radius: 5px;
                font-size: 14px;
            }
        """

    def show_warning(self, message):
        """ Hi·ªÉn th·ªã c·∫£nh b√°o v·ªõi n·ªÅn tr·∫Øng, ch·ªØ r√µ r√†ng """
        msg_box = QMessageBox(self.MainWindow)
        msg_box.setWindowTitle("C·∫£nh b√°o")
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Icon.Warning)  # Gi·ªØ icon c·∫£nh b√°o m·∫∑c ƒë·ªãnh

        # üîπ Tu·ª≥ ch·ªânh giao di·ªán QMessageBox
        msg_box.setStyleSheet("""
            QMessageBox {
                background-color: white;  /* N·ªÅn tr·∫Øng */
                color: black;  /* Ch·ªØ ƒëen */
                font-size: 14px;
                border-radius: 10px;
            }
            QLabel {
                background: transparent; /* Lo·∫°i b·ªè n·ªÅn ƒëen c·ªßa ch·ªØ */
                color: black;
            }
            QPushButton {
                background-color: #763e32; /* N√∫t OK m√†u xanh d∆∞∆°ng */
                color: white;
                border-radius: 5px;
                padding: 6px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #64B5F6; /* Xanh d∆∞∆°ng nh·∫°t khi hover */
            }
        """)
        msg_box.exec()

    def show_question(self, message):
        """ Hi·ªÉn th·ªã h·ªôp tho·∫°i c√¢u h·ªèi v·ªõi n·ªÅn tr·∫Øng, ch·ªØ r√µ r√†ng """
        msg_box = QMessageBox(self.MainWindow)
        msg_box.setWindowTitle("X√°c nh·∫≠n")
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Icon.Question)  # Icon d·∫•u h·ªèi
        msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        # üîπ T√πy ch·ªânh giao di·ªán QMessageBox
        msg_box.setStyleSheet("""
            QMessageBox {
                background-color: white;  /* N·ªÅn tr·∫Øng */
                color: black;  /* Ch·ªØ ƒëen */
                font-size: 14px;
                border-radius: 10px;
            }
            QLabel {
                background: transparent; /* Lo·∫°i b·ªè n·ªÅn ƒëen c·ªßa ch·ªØ */
                color: black;
            }
            QPushButton {
                background-color: #763e32; /* N√∫t xanh d∆∞∆°ng */
                color: white;
                border-radius: 5px;
                padding: 6px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #64B5F6; /* Xanh d∆∞∆°ng nh·∫°t khi hover */
            }
        """)

        return msg_box.exec()  # Tr·∫£ v·ªÅ k·∫øt qu·∫£ (Yes ho·∫∑c No)

    def show_information(self, message):
        """ Hi·ªÉn th·ªã h·ªôp tho·∫°i th√¥ng tin v·ªõi n·ªÅn tr·∫Øng, ch·ªØ r√µ r√†ng """
        msg_box = QMessageBox(self.MainWindow)
        msg_box.setWindowTitle("Th√¥ng b√°o")
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Icon.Information)  # Icon th√¥ng tin

        # üîπ T√πy ch·ªânh giao di·ªán QMessageBox
        msg_box.setStyleSheet("""
            QMessageBox {
                background-color: white;  /* N·ªÅn tr·∫Øng */
                color: black;  /* Ch·ªØ ƒëen */
                font-size: 14px;
                border-radius: 10px;
            }
            QLabel {
                background: transparent; /* Lo·∫°i b·ªè n·ªÅn ƒëen c·ªßa ch·ªØ */
                color: black;
            }
            QPushButton {
                background-color: #763e32; /* N√∫t xanh d∆∞∆°ng */
                color: white;
                border-radius: 5px;
                padding: 6px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #64B5F6; /* Xanh d∆∞∆°ng nh·∫°t khi hover */
            }
        """)

        msg_box.exec()

#############################################################################
########################### Qu·∫£n s·∫£n ph·∫©m ###################################
    def add_frame(self, product):
        """ Th√™m m·ªôt s·∫£n ph·∫©m l√™n giao di·ªán v√† thi·∫øt l·∫≠p SizePolicy """
        # üîπ T·∫°o frame m·ªõi
        new_frame = QFrame(self.scrollAreaWidgetContents)
        new_frame.setStyleSheet("""
            background-color: rgb(255, 255, 255);
            border-radius: 10px;
            border: 1px solid #ddd;
        """)
        new_frame.setFrameShape(QFrame.Shape.StyledPanel)
        new_frame.setFrameShadow(QFrame.Shadow.Raised)

        # ‚úÖ ƒê·∫∑t SizePolicy th√†nh Expanding
        size_policy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        new_frame.setSizePolicy(size_policy)
        new_frame.setFixedHeight(100)  # Ch·ªâ c·ªë ƒë·ªãnh chi·ªÅu cao

        # üîπ Th√™m QPushButton v√†o frame (d√πng ƒë·ªÉ ch·ª©a h√¨nh ·∫£nh)
        button = QPushButton(new_frame)
        button.setFixedSize(80, 80)
        button.move(10, 10)
        button.setStyleSheet("border: none; background-color: #f8f8f8; border-radius: 10px;")

        # üëâ Th√™m ·∫£nh v√†o button
        if hasattr(product, "image") and product.image:
            image_path = os.path.abspath(product.image)
            if os.path.exists(image_path):
                button.setIcon(QIcon(image_path))
                button.setIconSize(QSize(70, 70))

        # üîπ Th√™m QLabel cho t√™n s·∫£n ph·∫©m
        name_label = QLabel(product.name, new_frame)
        name_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #333; border: none;")
        name_label.move(100, 20)

        # üîπ Th√™m QLabel cho gi√° s·∫£n ph·∫©m
        price_label = QLabel(f"{product.description}", new_frame)
        price_label.setStyleSheet("font-size: 12px; color: #aaa; border: none;")
        price_label.setWordWrap(True)  # Cho ph√©p xu·ªëng d√≤ng t·ª± ƒë·ªông
        price_label.move(100, 50)

        # ‚úÖ G√°n s·ª± ki·ªán click cho frame
        new_frame.mousePressEvent = lambda event, p=product: self.display_product_details(p)

        # üîπ Th√™m frame v√†o layout
        self.verticalLayout_11.addWidget(new_frame)

    def display_product_details(self, product):
        """ ƒêi·ªÅn th√¥ng tin s·∫£n ph·∫©m v√†o c√°c √¥ nh·∫≠p li·ªáu khi b·∫•m v√†o frame """
        self.lineEditID.setText(product.id)
        self.lineEditName.setText(product.name)
        self.lineEditPrice.setText(str(product.price))
        self.lineEditQuantity.setText(str(product.quantity))
        self.lineEditCategory.setText(product.category)

        index = self.comboBox.findText(product.category)
        if index != -1:
            self.comboBox.setCurrentIndex(index)

    def load_products(self):
        """ Load danh s√°ch s·∫£n ph·∫©m t·ª´ JSON v√† hi·ªÉn th·ªã l√™n giao di·ªán """
        product_list = self.dc.get_all_products()  # L·∫•y danh s√°ch s·∫£n ph·∫©m

        # X√≥a to√†n b·ªô widget c≈© (n·∫øu c√≥)
        for i in reversed(range(self.verticalLayout_11.count())):
            widget = self.verticalLayout_11.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # Th√™m t·ª´ng s·∫£n ph·∫©m v√†o layout
        for product in product_list:
            self.add_frame(product)  # Truy·ªÅn ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m v√†o `add_frame`

    def add_product(self):
        """ C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m ho·∫∑c th√™m s·∫£n ph·∫©m m·ªõi """
        old_id = self.lineEditID.property("old_id")  # L·∫•y ID c≈© n·∫øu c√≥
        proid = self.lineEditID.text().strip()
        proname = self.lineEditName.text().strip()
        proprice = self.lineEditPrice.text().strip()
        proquan = self.lineEditQuantity.text().strip()
        procate = self.comboBox.currentText().strip()  # L·∫•y danh m·ª•c t·ª´ ComboBox

        errors = []

        # üîπ Ki·ªÉm tra ID s·∫£n ph·∫©m
        if not proid:
            errors.append(" ID s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        elif not re.match(r"^[a-zA-Z0-9_-]+$", proid):
            errors.append(" ID s·∫£n ph·∫©m ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi (_) ho·∫∑c g·∫°ch ngang (-).")

        # üîπ Ki·ªÉm tra t√™n s·∫£n ph·∫©m (ch·ªâ ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng)
        if not proname:
            errors.append(" T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        elif any(char.isdigit() or not (char.isalpha() or char.isspace()) for char in proname):
            errors.append(" T√™n s·∫£n ph·∫©m ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.")

        # üîπ Ki·ªÉm tra gi√° s·∫£n ph·∫©m (c√≥ th·ªÉ l√† s·ªë th·∫≠p ph√¢n)
        try:
            proprice = float(proprice)
            if proprice <= 0:
                errors.append(" Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng.")
        except ValueError:
            errors.append(" Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë h·ª£p l·ªá.")

        # üîπ Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (ch·ªâ ch·∫•p nh·∫≠n s·ªë nguy√™n d∆∞∆°ng)
        if not proquan.isdigit() or int(proquan) <= 0:
            errors.append(" S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.")

        # üîπ Ki·ªÉm tra danh m·ª•c s·∫£n ph·∫©m
        if not procate:
            errors.append(" Vui l√≤ng ch·ªçn danh m·ª•c s·∫£n ph·∫©m.")

        # ‚úÖ Ki·ªÉm tra ID c√≥ b·ªã tr√πng kh√¥ng
        jff = JsonFileFactory()
        products = jff.read_data("../datasets/products.json", Product)

        if old_id:  # ƒêang c·∫≠p nh·∫≠t s·∫£n ph·∫©m
            existing_product = next((p for p in products if p.id == old_id), None)
            if not existing_product:
                errors.append("S·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t kh√¥ng t·ªìn t·∫°i.")

            elif old_id != proid and any(p.id == proid for p in products):
                errors.append("ID m·ªõi ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn ID kh√°c.")

        else:  # ƒêang th√™m m·ªõi s·∫£n ph·∫©m
            if any(p.id == proid for p in products):
                errors.append("ID s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn ID kh√°c.")

        # ‚úÖ N·∫øu c√≥ l·ªói th√¨ b√°o t·∫•t c·∫£ l·ªói v√† d·ª´ng l·∫°i
        if errors:
            self.show_warning("\n".join(errors))
            return

        # ‚úÖ N·∫øu kh√¥ng c√≥ l·ªói, m·ªü h·ªôp tho·∫°i ch·ªçn ·∫£nh
        image_path, _ = QFileDialog.getOpenFileName(self.MainWindow, "Ch·ªçn ·∫£nh s·∫£n ph·∫©m", "",
                                                    "Images (*.png *.jpg *.jpeg *.bmp)")

        if not image_path:
            self.show_warning("Vui l√≤ng ch·ªçn ·∫£nh s·∫£n ph·∫©m!")
            return

        # ‚úÖ Ti·∫øn h√†nh c·∫≠p nh·∫≠t ho·∫∑c th√™m s·∫£n ph·∫©m
        if old_id:
            # C·∫≠p nh·∫≠t s·∫£n ph·∫©m
            existing_product.id = proid
            existing_product.name = proname
            existing_product.category = procate
            existing_product.price = str(proprice)  # Chuy·ªÉn v·ªÅ string ƒë·ªÉ l∆∞u JSON
            existing_product.quantity = proquan
            existing_product.image = image_path
            self.show_information(" S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

        else:
            # Th√™m s·∫£n ph·∫©m m·ªõi
            new_product = Product(proid, proname, procate, str(proprice), proquan, image_path)
            products.append(new_product)
            self.show_information( " S·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m!")

        # ‚úÖ Ghi d·ªØ li·ªáu m·ªõi v√†o JSON
        jff.write_data(products, "../datasets/products.json")

        # ‚úÖ T·∫£i l·∫°i danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t UI
        self.load_products()

    def new_product(self):
        """ X√≥a th√¥ng tin s·∫£n ph·∫©m ƒëang ch·ªânh s·ª≠a ƒë·ªÉ t·∫°o m·ªõi """
        self.selected_product = None
        self.lineEditID.setText("")
        self.lineEditName.setText("")
        self.lineEditCategory.setText("")
        self.lineEditQuantity.setText("")
        self.lineEditPrice.setText("")
        self.lineEditID.setFocus()

    def update_category_combobox(self):
        categories = self.load_categories()  # G·ªçi h√†m load danh m·ª•c
        self.comboBox.clear()
        self.comboBox.addItem("All")  # Th√™m t√πy ch·ªçn xem t·∫•t c·∫£
        self.comboBox.addItems(categories)

    def load_categories(self):
        try:
            jff = JsonFileFactory()
            categories = jff.read_data("../datasets/categories.json", list)
            if not isinstance(categories, list):
                raise ValueError("D·ªØ li·ªáu danh m·ª•c kh√¥ng ph·∫£i l√† danh s√°ch!")
            return categories
        except Exception as e:
            print(f"L·ªói khi load danh m·ª•c: {e}")
            return []  # Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu c√≥ l·ªói

    def delete_product(self):
        """ X√≥a s·∫£n ph·∫©m ƒëang ƒë∆∞·ª£c ch·ªçn """
        proid = self.lineEditID.text().strip()

        if not proid:
            self.show_warning("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a!")
            return

        # X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        reply = self.show_question(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m c√≥ ID {proid} kh√¥ng?")

        if reply != QMessageBox.StandardButton.Yes:
            return

        # ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ JSON
        jff = JsonFileFactory()
        products = jff.read_data("../datasets/products.json", Product)

        # L·ªçc s·∫£n ph·∫©m c·∫ßn x√≥a
        updated_products = [p for p in products if p.id != proid]

        # Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        if len(products) == len(updated_products):
            self.show_warning("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!")
            return

        # Ghi l·∫°i danh s√°ch s·∫£n ph·∫©m sau khi x√≥a
        jff.write_data(updated_products, "../datasets/products.json")

        self.show_information("üéâ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a!")

        # X√≥a th√¥ng tin tr√™n giao di·ªán v√† t·∫£i l·∫°i danh s√°ch
        self.new_product()
        self.load_products()

    def setup_search_completer_product(self):
        """Thi·∫øt l·∫≠p g·ª£i √Ω t√¨m ki·∫øm v·ªõi QCompleter"""
        product_names = [product.name for product in self.dc.get_all_products()]
        self.completer = QCompleter(product_names, self.MainWindow)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.completer.setFilterMode(Qt.MatchContains)
        self.completer.activated.connect(self.on_completer_selected_product)
        self.lineEditSearch.setCompleter(self.completer)
        self.comboBox.currentIndexChanged.connect(self.filter_products)

    def on_completer_selected_product(self, text):
        """Khi ch·ªçn m·ªôt g·ª£i √Ω, t·ª± ƒë·ªông c·∫≠p nh·∫≠t √¥ t√¨m ki·∫øm v√† l·ªçc danh s√°ch"""
        self.lineEditSearch.setText(text)
        self.filter_products()

    def filter_products(self):
        """L·ªçc danh s√°ch s·∫£n ph·∫©m d·ª±a tr√™n n·ªôi dung t√¨m ki·∫øm"""
        search_text = self.lineEditSearch.text().strip().lower()
        selected_category = self.comboBox.currentText().strip()  # L·∫•y danh m·ª•c t·ª´ comboBox

        # L·∫•y to√†n b·ªô s·∫£n ph·∫©m
        all_products = self.dc.get_all_products()

        # L·ªçc theo t√™n s·∫£n ph·∫©m n·∫øu c√≥ t√¨m ki·∫øm
        filtered_products = [p for p in all_products if search_text in p.name.lower()] if search_text else all_products

        # L·ªçc theo danh m·ª•c n·∫øu danh m·ª•c kh√¥ng ph·∫£i "All"
        if selected_category and selected_category != "All":
            filtered_products = [p for p in filtered_products if p.category.lower() == selected_category.lower()]

        # X√≥a to√†n b·ªô s·∫£n ph·∫©m hi·ªán t·∫°i trong UI
        for i in reversed(range(self.verticalLayout_11.count())):
            widget = self.verticalLayout_11.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
        for product in filtered_products:
            self.add_frame(product)


#############################################################################
######################## Qu·∫£n l√Ω ƒë∆°n h√†ng + menu  ###########################
    def setup_filter_menu(self):
        """T·∫°o danh m·ª•c s·∫£n ph·∫©m v·ªõi kho·∫£ng c√°ch ƒë·ªÅu nhau v√† kh√¥ng b·ªã d∆∞ ·∫£nh default"""
        categories = self.load_categories()
        if "All" not in categories:  # ƒê·∫£m b·∫£o danh m·ª•c "All" lu√¥n c√≥
            categories.insert(0, "All")

        category_images = {
            "All": "../images/all.png",
            "Coffee": "../images/coffee.png",
            "Tea": "../images/tea (2).png",
            "Juice": "../images/juice.png",
        }

        # X√≥a danh m·ª•c c≈©
        while self.horizontalLayoutFilterMenu.count():
            item = self.horizontalLayoutFilterMenu.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        # Th√™m spacer tr√°i ƒë·ªÉ cƒÉn gi·ªØa danh m·ª•c
        self.horizontalLayoutFilterMenu.addSpacerItem(
            QSpacerItem(20, 10, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
        )

        added_categories = set()
        all_frame = None  # L∆∞u frame c·ªßa "All" ƒë·ªÉ ch·ªçn m·∫∑c ƒë·ªãnh

        for category in categories:
            category_name = category if isinstance(category, str) else category.get("name", "Unknown")

            if category_name in added_categories:
                continue
            added_categories.add(category_name)

            image_path = category_images.get(category_name, "../images/default.png")
            if not os.path.exists(image_path):
                image_path = "../images/default.png"

            frame = QFrame()
            frame.setFixedSize(80, 80)
            frame.setStyleSheet("""
                QFrame {
                    border-radius: 10px;
                    background-color: white;
                    border: 2px solid transparent;
                }
            """)

            v_layout = QVBoxLayout(frame)
            v_layout.setSpacing(5)
            v_layout.setContentsMargins(5, 5, 5, 5)

            img_label = QLabel()
            pixmap = QPixmap(image_path)
            img_label.setPixmap(
                pixmap.scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            )
            img_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            img_label.setStyleSheet("border: none; background: transparent;")

            text_label = QLabel(category_name)
            text_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            text_label.setStyleSheet("border: none; background: transparent; font-size: 12px; color: black;")

            v_layout.addWidget(img_label)
            v_layout.addWidget(text_label)

            frame.mousePressEvent = lambda event, name=category_name, f=frame: self.on_category_selected(name, f)

            # N·∫øu l√† danh m·ª•c "All", l∆∞u l·∫°i frame ƒë·ªÉ ch·ªçn m·∫∑c ƒë·ªãnh
            if category_name == "All":
                all_frame = frame

            self.horizontalLayoutFilterMenu.addWidget(frame)

        # Th√™m spacer ph·∫£i ƒë·ªÉ cƒÉn gi·ªØa danh m·ª•c
        self.horizontalLayoutFilterMenu.addSpacerItem(
            QSpacerItem(20, 10, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
        )

        # Ch·ªçn m·∫∑c ƒë·ªãnh danh m·ª•c "All" n·∫øu t·ªìn t·∫°i
        if all_frame:
            self.on_category_selected("All", all_frame)

    def update_brief_information(self, category_name, total_items):
        """C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ menu v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m"""

        if category_name == "All":
            self.label_10.setText("All Products")
            self.label_5.setText(f"{total_items} items available")
        else:
            self.label_10.setText(f"{category_name} Menu")
            self.label_5.setText(f"{total_items} {category_name.lower()} results")

    def get_products_by_category(self, category_id):
        """L·ªçc s·∫£n ph·∫©m theo danh m·ª•c, bao g·ªìm c·∫£ 'All' ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£"""
        if category_id == "All":
            return self.dc.get_all_products()  # Tr·∫£ v·ªÅ to√†n b·ªô s·∫£n ph·∫©m
        return [product for product in self.dc.get_all_products() if product.category == category_id]

    def on_category_selected(self, category_name, selected_frame):
        """X·ª≠ l√Ω khi click v√†o danh m·ª•c - C·∫≠p nh·∫≠t giao di·ªán v√† hi·ªÉn th·ªã s·∫£n ph·∫©m thu·ªôc danh m·ª•c ƒë√≥"""

        # B·ªè hi·ªáu ·ª©ng c·ªßa danh m·ª•c c≈© n·∫øu c√≥
        if hasattr(self, 'selected_category_frame') and self.selected_category_frame:
            self.selected_category_frame.setStyleSheet("""
                QFrame {
                    border-radius: 10px;
                    background-color: white;
                    border: 2px solid transparent; /* B·ªè vi·ªÅn */
                }
            """)

        # G√°n danh m·ª•c m·ªõi ƒë∆∞·ª£c ch·ªçn
        self.selected_category_frame = selected_frame
        selected_frame.setStyleSheet("""
            QFrame {
                border-radius: 10px;
                background-color: #f7f3f0; /* M√†u n·ªÅn n√¢u nh·∫°t */
                border: 3px solid #8b5e3c; /* Vi·ªÅn n√¢u */
            }
        """)

        # üéØ L·ªçc danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
        filtered_products = self.get_products_by_category(category_name)

        # C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c
        total_items = len(filtered_products)
        self.update_brief_information(category_name, total_items)

        # üõí Load menu v·ªõi danh s√°ch s·∫£n ph·∫©m ƒë√£ l·ªçc
        self.load_menu(filtered_products)

    def create_product_frame(self, product):
        """T·∫°o m·ªôt frame ch·ª©a th√¥ng tin s·∫£n ph·∫©m v·ªõi b·ªë c·ª•c nh·ªè g·ªçn h∆°n"""
        new_frame = QFrame()
        new_frame.setFixedSize(230, 350)  # Gi·∫£m k√≠ch th∆∞·ªõc frame
        new_frame.setStyleSheet("""
            QFrame {
                background-color: #fff;
                border-radius: 12px;
                border: none;
                padding: 6px;
            }
        """)

        main_layout = QVBoxLayout(new_frame)
        main_layout.setContentsMargins(6, 6, 6, 6)
        main_layout.setSpacing(4)

        # üèóÔ∏è Ph·∫ßn tr√™n: ·∫¢nh + Th√¥ng tin s·∫£n ph·∫©m
        top_frame = QFrame()
        top_layout = QHBoxLayout(top_frame)
        top_layout.setContentsMargins(0, 0, 0, 0)
        top_layout.setSpacing(6)

        # üñº H√¨nh ·∫£nh s·∫£n ph·∫©m
        image_label = QLabel()
        if hasattr(product, "image") and product.image:
            image_path = os.path.abspath(product.image)
            if os.path.exists(image_path):
                pixmap = QPixmap(image_path).scaled(80, 80, Qt.AspectRatioMode.KeepAspectRatio,
                                                    Qt.TransformationMode.SmoothTransformation)
                image_label.setPixmap(pixmap)
        image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        image_label.setStyleSheet("border: none;")

        # üìÑ Th√¥ng tin s·∫£n ph·∫©m
        info_layout = QVBoxLayout()
        name_label = QLabel(f"{product.name}")
        name_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #333;")

        desc_label = QLabel(f"{product.description}")
        desc_label.setStyleSheet("font-size: 12px; color: #777;")
        desc_label.setWordWrap(True)  # Cho ph√©p xu·ªëng d√≤ng t·ª± ƒë·ªông

        price_label = QLabel(f"<b>{product.price} VND</b>")
        price_label.setStyleSheet("color: #d35400; font-size: 14px; font-weight: bold;")

        info_layout.addWidget(name_label)
        info_layout.addWidget(desc_label)
        info_layout.addWidget(price_label)

        top_layout.addWidget(image_label)
        top_layout.addLayout(info_layout)
        top_frame.setLayout(top_layout)

        # üèóÔ∏è Ph·∫ßn d∆∞·ªõi: T√πy ch·ªçn size, ƒë∆∞·ªùng, ƒë√° + n√∫t ƒë·∫∑t h√†ng
        bottom_frame = QFrame()
        bottom_layout = QVBoxLayout(bottom_frame)
        bottom_layout.setSpacing(4)

        option_layout = QGridLayout()
        option_layout.setSpacing(4)

        # üîπ T·∫°o nh√≥m n√∫t ri√™ng cho t·ª´ng s·∫£n ph·∫©m
        size_group = QButtonGroup(new_frame)
        sugar_group = QButtonGroup(new_frame)
        ice_group = QButtonGroup(new_frame)

        # Ch·ªâ cho ph√©p ch·ªçn 1 n√∫t trong m·ªói nh√≥m
        size_group.setExclusive(True)
        sugar_group.setExclusive(True)
        ice_group.setExclusive(True)

        # Ti√™u ƒë·ªÅ c√°c t√πy ch·ªçn
        size_label = QLabel("Size:")
        sugar_label = QLabel("Sugar:")
        ice_label = QLabel("Ice:")

        for lbl in [size_label, sugar_label, ice_label]:
            lbl.setStyleSheet("font-size: 12px; font-weight: bold; border: none;")

        option_layout.addWidget(size_label, 0, 0)
        option_layout.addWidget(sugar_label, 1, 0)
        option_layout.addWidget(ice_label, 2, 0)

        button_size = 25  # Gi·∫£m k√≠ch th∆∞·ªõc n√∫t

        # üîπ N√∫t ch·ªçn Size
        size_prices = {"S": 0, "M": 5000, "L": 10000}  # Gi√° thay ƒë·ªïi theo size

        for i, size in enumerate(["S", "M", "L"]):
            btn = QPushButton(size)
            btn.setCheckable(True)
            btn.setFixedSize(button_size, button_size)
            btn.setStyleSheet("""
                QPushButton {
                    border-radius: 12px;
                    background-color: #f0f0f0;
                    border: 1px solid #ccc;
                    font-size: 10px;
                }
                QPushButton:checked {
                    background-color: #8B4513;
                    color: white;
                }
            """)
            size_group.addButton(btn)  # Th√™m v√†o nh√≥m
            option_layout.addWidget(btn, 0, i + 1)

            # Khi n√∫t size ƒë∆∞·ª£c ch·ªçn, c·∫≠p nh·∫≠t gi√°
            btn.clicked.connect(partial(self.update_product_price, size, price_label, product))

        # üîπ N√∫t ch·ªçn Sugar
        for i, level in enumerate(["30%", "50%", "70%"]):
            btn = QPushButton(level)
            btn.setCheckable(True)
            btn.setFixedSize(button_size, button_size)
            btn.setStyleSheet("""
                QPushButton {
                    border-radius: 12px;
                    background-color: #f0f0f0;
                    border: 1px solid #ccc;
                    font-size: 10px;
                }
                QPushButton:checked {
                    background-color: #8B4513;
                    color: white;
                }
            """)
            sugar_group.addButton(btn)
            option_layout.addWidget(btn, 1, i + 1)

        # üîπ N√∫t ch·ªçn Ice
        for i, level in enumerate(["30%", "50%", "70%"]):
            btn = QPushButton(level)
            btn.setCheckable(True)
            btn.setFixedSize(button_size, button_size)
            btn.setStyleSheet("""
                QPushButton {
                    border-radius: 12px;
                    background-color: #f0f0f0;
                    border: 1px solid #ccc;
                    font-size: 10px;
                }
                QPushButton:checked {
                    background-color: #8B4513;
                    color: white;
                }
            """)
            ice_group.addButton(btn)
            option_layout.addWidget(btn, 2, i + 1)

        bottom_layout.addLayout(option_layout)

        # üõí N√∫t th√™m v√†o h√≥a ƒë∆°n
        add_button = QPushButton("Add")
        add_button.setFixedSize(80, 30)  # Gi·∫£m k√≠ch th∆∞·ªõc n√∫t
        add_button.setStyleSheet("""
            QPushButton {
                background-color: #8B4513;
                color: white;
                border-radius: 8px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #A0522D;
            }
        """)
        bottom_layout.addWidget(add_button, alignment=Qt.AlignmentFlag.AlignCenter)

        main_layout.addWidget(top_frame)
        main_layout.addWidget(bottom_frame)

        new_frame.setLayout(main_layout)

        add_button.clicked.connect(lambda: self.add_to_order(product, price_label))  # C·∫≠p nh·∫≠t khi nh·∫•n "Add to Order"

        return new_frame

    def update_product_price(self, size, price_label, product):
        """C·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m khi ch·ªçn size"""
        size_prices = {"S": 0, "M": 5000, "L": 15000}  # Gi√° thay ƒë·ªïi theo size
        base_price = product.price
        if size in size_prices:
            new_price = base_price + size_prices[size]
            price_label.setText(f"<b>{new_price} VND</b>")
        else:
            price_label.setText(f"<b>{base_price} VND</b>")

    def load_menu(self, product_list=None):
        """ Load danh s√°ch s·∫£n ph·∫©m t·ª´ JSON v√† hi·ªÉn th·ªã l√™n giao di·ªán v·ªõi b·ªë c·ª•c 2 c·ªôt """
        if product_list is None:
            product_list = self.dc.get_all_products()

        while self.gridLayout_ProductMenu.count():
            widget = self.gridLayout_ProductMenu.takeAt(0).widget()
            if widget:
                widget.deleteLater()

        columns = 2  # Gi·ªõi h·∫°n c√≤n 2 c·ªôt
        self.gridLayout_ProductMenu.setHorizontalSpacing(10)
        self.gridLayout_ProductMenu.setVerticalSpacing(10)
        self.gridLayout_ProductMenu.setAlignment(Qt.AlignmentFlag.AlignTop)

        for index, product in enumerate(product_list):
            row = index // columns
            col = index % columns
            frame = self.create_product_frame(product)
            self.gridLayout_ProductMenu.addWidget(frame, row, col)

        items_in_last_row = len(product_list) % columns
        if items_in_last_row > 0:
            for _ in range(columns - items_in_last_row):
                self.gridLayout_ProductMenu.addItem(QSpacerItem(10, 10), row, col + 1)

    def add_to_order(self, product, price_label):
        """Th√™m s·∫£n ph·∫©m v√†o danh s√°ch order"""

        # L·∫•y gi√° hi·ªán t·∫°i t·ª´ price_label v√† t√≠nh to√°n
        price_text = price_label.text().replace("<b>", "").replace(" VND</b>", "")
        price = int(price_text.replace(",", ""))

        # T·∫°o khung ch·ª©a s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        order_frame = QFrame()
        order_frame.setStyleSheet("background-color: white; border: 1px solid #ccc; border-radius: 5px;")
        order_frame.setFixedHeight(40)

        layout = QHBoxLayout(order_frame)
        layout.setContentsMargins(10, 2, 10, 2)
        layout.setSpacing(15)

        # T√™n s·∫£n ph·∫©m
        name_label = QLabel(product.name)
        name_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #333; border: none;")
        layout.addWidget(name_label)

        # Gi√° s·∫£n ph·∫©m
        price_label = QLabel(f"{price:,} VND")
        price_label.setStyleSheet("font-size: 14px; color: #555; border: none;")
        layout.addWidget(price_label)

        # N√∫t gi·∫£m s·ªë l∆∞·ª£ng
        btn_minus = QPushButton("-")
        btn_minus.setFixedSize(25, 25)
        btn_minus.setStyleSheet("font-size: 14px;")
        layout.addWidget(btn_minus)

        # √î nh·∫≠p s·ªë l∆∞·ª£ng
        quantity_input = QLineEdit("1")
        quantity_input.setFixedWidth(40)
        quantity_input.setAlignment(Qt.AlignmentFlag.AlignCenter)
        quantity_input.setValidator(QIntValidator(0, 999))
        quantity_input.setStyleSheet("font-size: 14px; padding: 5px; text-align: center;")
        layout.addWidget(quantity_input)

        # N√∫t tƒÉng s·ªë l∆∞·ª£ng
        btn_plus = QPushButton("+")
        btn_plus.setFixedSize(25, 25)
        btn_plus.setStyleSheet("font-size: 14px;")
        layout.addWidget(btn_plus)

        # T·ªïng gi√° c·ªßa s·∫£n ph·∫©m n√†y
        total_price_label = QLabel(f"{price:,} VND")
        total_price_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #333; border: none;")
        layout.addWidget(total_price_label)

        # H√†m c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
        def update_total_price():
            try:
                quantity = int(quantity_input.text())
                if quantity == 0:
                    order_frame.setParent(None)  # X√≥a s·∫£n ph·∫©m kh·ªèi giao di·ªán
                else:
                    total_price_label.setText(f"{quantity * price:,} VND")
                self.update_total_payment()  # C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
            except ValueError:
                quantity_input.setText("1")

        # K·∫øt n·ªëi s·ª± ki·ªán tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng
        btn_minus.clicked.connect(lambda: quantity_input.setText(str(max(0, int(quantity_input.text()) - 1))))
        btn_plus.clicked.connect(lambda: quantity_input.setText(str(int(quantity_input.text()) + 1)))
        quantity_input.textChanged.connect(update_total_price)

        # ƒê·∫£m b·∫£o total_price_label lu√¥n ·ªü d∆∞·ªõi c√πng
        if not hasattr(self, "total_price_label"):
            self.total_price_label = QLabel("T·ªïng ti·ªÅn: 0 VND")
            self.total_price_label.setAlignment(Qt.AlignmentFlag.AlignRight)
            self.total_price_label.setStyleSheet(
                "font-size: 16px; font-weight: bold; color: #d32f2f; border: none; margin-top: 10px;")
            self.verticalLayout_Order.addWidget(self.total_price_label)

        # Th√™m s·∫£n ph·∫©m v√†o danh s√°ch
        self.verticalLayout_Order.insertWidget(self.verticalLayout_Order.count() - 1, order_frame)

        # C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay khi th√™m s·∫£n ph·∫©m
        self.update_total_payment()

    def export_bill_pdf(self):
        """Xu·∫•t h√≥a ƒë∆°n ra file PDF v√† l∆∞u th√¥ng tin v√†o JSON"""

        bill_json = "../datasets/bills.json"
        customers_json = "../datasets/customers.json"
        jff = JsonFileFactory()

        # L·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ giao di·ªán
        customer_name = self.lineEditCustomerName.text().strip() or "Kh√°ch h√†ng kh√¥ng t√™n"
        phone_number = self.lineEditCustomerPhoneNumber.text().strip() or "0000000000"
        order_time = datetime.now().strftime("%H:%M %d/%m/%Y")
        total_payment = 0

        # L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ giao di·ªán
        order_items = []
        for i in range(self.verticalLayout_Order.count() - 1):
            item = self.verticalLayout_Order.itemAt(i)
            if item and item.widget():
                widget = item.widget()
                labels = widget.findChildren(QLabel)
                line_edits = widget.findChildren(QLineEdit)

                if labels and line_edits:
                    product_name = labels[0].text()
                    price = int(labels[1].text().replace(" VND", "").replace(",", ""))
                    quantity = int(line_edits[0].text())
                    total_price = price * quantity

                    # T·∫°o ƒë·ªëi t∆∞·ª£ng Order v√† th√™m v√†o danh s√°ch order_items
                    order_items.append(Order(product_name, quantity, total_price))
                    total_payment += total_price

        # Ki·ªÉm tra ƒëi·ªÉm c·ªßa kh√°ch h√†ng v√† √°p d·ª•ng gi·∫£m gi√°
        try:
            customers_data_list = jff.read_data(customers_json, Customer)
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ {customers_json}: {e}")
            customers_data_list = []

        customer_points = 0
        for customer in customers_data_list:
            if customer.phone == phone_number:
                customer_points = customer.points
                break

        # √Åp d·ª•ng gi·∫£m gi√° n·∫øu ƒë·ªß ƒëi·ªÉm (truy·ªÅn ƒë√∫ng c√°c ƒë·ªëi s·ªë)
        total_payment = self.discount(total_payment, customer_points)

        # T·∫°o v√† l∆∞u h√≥a ƒë∆°n nh∆∞ b√¨nh th∆∞·ªùng
        file_path, _ = QFileDialog.getSaveFileName(self.MainWindow, "L∆∞u h√≥a ƒë∆°n", "", "PDF Files (*.pdf)")
        if not file_path:
            return  # Ng∆∞·ªùi d√πng b·∫•m H·ªßy

        # T·∫°o n·ªôi dung h√≥a ƒë∆°n HTML
        bill_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; font-size: 16px; text-align: center; }}
                table {{ width: 80%; border-collapse: collapse; margin-left: auto; margin-right: auto; }}
                th, td {{ border: 1px solid black; padding: 10px; text-align: center; }}
                th {{ background-color: #ddd; font-size: 18px; }}
                .total {{ font-weight: bold; font-size: 20px; color: red; text-align: right; padding-right: 5%; }}
                .thankyou {{ text-align: center; margin-top: 15px; font-size: 14px; }}
            </style>
        </head>
        <body>
            <h1>COFFEE BINBO</h1>
            <p>KCN B·∫ÆC ƒê·ªíNG PH√ö, TT T√ÇN PH√ö.<br>0904813138</p>
            <h2>H√ìA ƒê∆†N B√ÄN 10</h2>
            <p><b>Gi·ªù b·∫Øt ƒë·∫ßu:</b> {order_time}</p>
            <p><b>Kh√°ch h√†ng:</b> {customer_name} | <b>SƒêT:</b> {phone_number}</p>

            <table>
                <tr>
                    <th>T√™n</th>
                    <th>SL</th>
                    <th>Gi√°</th>
                    <th>T·ªïng</th>
                </tr>
        """

        for item in order_items:
            bill_content += f"""
            <tr>
                <td>{item.product_name}</td>
                <td>{item.quantity}</td>
                <td>{item.total_price:,} VND</td>
                <td>{item.total_price:,} VND</td>
            </tr>
            """

        bill_content += f"""
            </table>
            <p class="total">T·ªïng d·ªãch v·ª•: {total_payment:,} VND</p>
            <h2 class="bold">THANH TO√ÅN: {total_payment:,} VND</h2>
            <p><b>M√£ h√≥a ƒë∆°n:</b> {rd.randint(1000, 9999)}</p>
            <p><b>Thu ng√¢n:</b> Nguy·ªÖn Duy Quang</p>

            <p class="thankyou">
                Qu√Ω kh√°ch vui l√≤ng ki·ªÉm tra l·∫°i h√≥a ƒë∆°n tr∆∞·ªõc khi thanh to√°n.<br>
                Xin c·∫£m ∆°n qu√Ω kh√°ch.<br>
                H·∫πn g·∫∑p l·∫°i qu√Ω kh√°ch l·∫ßn sau.
            </p>
        </body>
        </html>
        """

        # L∆∞u file PDF
        doc = QTextDocument()
        doc.setHtml(bill_content)
        printer = QPrinter()
        printer.setOutputFormat(QPrinter.OutputFormat.PdfFormat)
        printer.setOutputFileName(file_path)
        doc.print_(printer)

        # L∆∞u th√¥ng tin v√†o file JSON
        bill_data = Bill(customer_name, phone_number, file_path.split('/')[-1])

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON b·∫±ng jff
        try:
            bills_data = jff.read_data(bill_json, Bill)  # ƒê·ªçc d·ªØ li·ªáu t·ª´ bills.json (d·ª±ng d·∫°ng dict)
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ {bill_json}: {e}")
            bills_data = []  # N·∫øu c√≥ l·ªói th√¨ kh·ªüi t·∫°o danh s√°ch r·ªóng
        # Th√™m th√¥ng tin h√≥a ƒë∆°n v√†o danh s√°ch
        bills_data.append(bill_data)

        jff = JsonFileFactory()
        try:
            customers_data_list = jff.read_data(customers_json, Customer)
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ {customers_json}: {e}")
            customers_data_list = []  # N·∫øu c√≥ l·ªói, t·∫°o danh s√°ch r·ªóng

        # Ki·ªÉm tra xem kh√°ch h√†ng ƒë√£ c√≥ trong danh s√°ch ch∆∞a
        customer_found = False
        for customer in customers_data_list:
            if customer.phone == phone_number:
                # N·∫øu kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t th√¥ng tin
                customer_found = True
                customer.total_payment += total_payment  # C·ªông d·ªìn t·ªïng ti·ªÅn
                customer.points += total_payment // 1000  # C·ªông d·ªìn ƒëi·ªÉm t√≠ch l≈©y
                customer.last_transaction_time = order_time
                break

        # N·∫øu kh√°ch h√†ng ch∆∞a c√≥, t·∫°o m·ªõi kh√°ch h√†ng v√† th√™m v√†o danh s√°ch
        if not customer_found:
            new_customer = Customer(customer_name, phone_number)
            new_customer.total_payment = total_payment
            new_customer.points = total_payment // 1000
            new_customer.last_transaction_time = order_time
            customers_data_list.append(new_customer)

        # Ghi l·∫°i d·ªØ li·ªáu v√†o file JSON
        jff.write_data(customers_data_list, customers_json)

        # Ghi l·∫°i d·ªØ li·ªáu v√†o file JSON
        jff.write_data(bills_data, bill_json)

        print(f"üìÑ H√≥a ƒë∆°n ƒë√£ l∆∞u t·∫°i: {file_path}")
        print(f"üíæ ƒê√£ l∆∞u th√¥ng tin h√≥a ƒë∆°n c·ªßa kh√°ch {customer_name} v√†o {bill_json}")

    def get_current_time(self):
        """H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr√™n h√≥a ƒë∆°n"""
        from datetime import datetime
        return datetime.now().strftime("%H:%M %d/%m/%Y")

    def discount(self, total_price, customer_points):
        """Gi·∫£m gi√° 50,000 VND n·∫øu kh√°ch h√†ng c√≥ 1000 ƒëi·ªÉm t√≠ch l≈©y"""
        discount_amount = 50000 if customer_points >= 1000 else 0
        final_price = max(0, total_price - discount_amount)  # ƒê·∫£m b·∫£o gi√° kh√¥ng √¢m

        # N·∫øu gi·∫£m gi√° th√†nh c√¥ng, c·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm trong JSON
        if discount_amount > 0:
            # L·∫•y s·ªë ƒëi·ªán tho·∫°i c·ªßa kh√°ch h√†ng t·ª´ √¥ nh·∫≠p li·ªáu
            phone_number = self.lineEditCustomerPhoneNumber.text().strip() or "0000000000"

            # C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm trong file JSON (truy·ªÅn c·∫£ phone_number v√† s·ªë ƒëi·ªÉm m·ªõi)
            self.update_customer_points(phone_number,
                                        customer_points - 1000)  # Tr·ª´ ƒëi 1000 ƒëi·ªÉm sau khi √°p d·ª•ng gi·∫£m gi√°

        return final_price

    def on_discount_button_clicked(self):
        """H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n n√∫t gi·∫£m gi√°"""
        self.update_total_payment()  # C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn v√† ƒëi·ªÉm kh√°ch h√†ng

    def update_total_payment(self):
        total_payment = 0
        # T√≠nh t·ªïng ti·ªÅn c·ªßa t·∫•t c·∫£ c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng
        for i in range(self.verticalLayout_Order.count()):
            item = self.verticalLayout_Order.itemAt(i)
            if item and item.widget():
                widget = item.widget()
                total_labels = widget.findChildren(QLabel)
                if total_labels:
                    total_text = total_labels[-1].text().replace(",", "").replace(" VND", "")
                    total_payment += int(total_text) if total_text.isdigit() else 0

        # L·∫•y ƒëi·ªÉm kh√°ch h√†ng t·ª´ d·ªØ li·ªáu
        customer_points = 0
        phone_number = self.lineEditCustomerPhoneNumber.text().strip() or "0000000000"

        # L·∫•y danh s√°ch kh√°ch h√†ng t·ª´ file JSON
        customers_data_list = self.dc.get_customers_data()

        for customer in customers_data_list:
            if customer.phone == phone_number:
                customer_points = customer.points
                break

        # √Åp d·ª•ng gi·∫£m gi√° n·∫øu kh√°ch h√†ng ƒë·ªß ƒëi·ªÉm
        total_payment = self.discount(total_payment, customer_points)  # Gi·∫£m gi√°

        # C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn sau gi·∫£m gi√°
        self.total_price_label.setText(f"T·ªïng ti·ªÅn: {total_payment:,} VND")

    def update_customer_points(self, phone_number, new_points):
        """C·∫≠p nh·∫≠t ƒëi·ªÉm t√≠ch l≈©y c·ªßa kh√°ch h√†ng v√†o file JSON"""
        customers_json = "../datasets/customers.json"
        jff = JsonFileFactory()

        try:
            customers_data_list = jff.read_data(customers_json, Customer)
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ {customers_json}: {e}")
            customers_data_list = []  # N·∫øu c√≥ l·ªói, t·∫°o danh s√°ch r·ªóng

        customer_found = False
        for customer in customers_data_list:
            if customer.phone == phone_number:
                customer_found = True
                customer.points = new_points  # C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm
                break

        if customer_found:
            # Ghi l·∫°i d·ªØ li·ªáu v√†o file JSON
            jff.write_data(customers_data_list, customers_json)
            print(f"ƒêi·ªÉm c·ªßa kh√°ch h√†ng {phone_number} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh {new_points}.")
        else:
            print(f"Kh√°ch h√†ng v·ªõi SƒêT {phone_number} kh√¥ng t√¨m th·∫•y.")


#############################################################################
######################## Qu·∫£n l√Ω nh√¢n vi√™n #################################

    #t√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n t√™n s·∫£n ph·∫©m
    def setup_search_completer_employee(self):
        """Thi·∫øt l·∫≠p QCompleter v√† k·∫øt n·ªëi s·ª± ki·ªán t√¨m ki·∫øm nh√¢n vi√™n"""
        emp_names = [emp.name for emp in self.dc.get_all_employees()]
        self.completer = QCompleter(emp_names, self.MainWindow)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.completer.setFilterMode(Qt.MatchContains)
        self.completer.activated.connect(self.on_completer_selected_employee)
        self.lineEditSearchEmployee.setCompleter(self.completer)
        self.lineEditSearchEmployee.textChanged.connect(self.filter_employees_table)

    def on_completer_selected_employee(self, text):
        """C·∫≠p nh·∫≠t √¥ t√¨m ki·∫øm v√† l·ªçc b·∫£ng khi ch·ªçn g·ª£i √Ω nh√¢n vi√™n"""
        self.lineEditSearchEmployee.setText(text)
        self.filter_employees_table()

    def filter_employees_table(self):
        """L·ªçc danh s√°ch nh√¢n vi√™n tr√™n QTableWidget theo t√™n"""
        search_text = self.lineEditSearchEmployee.text().strip().lower()

        if self.tableWidgetEmployee.rowCount() == 0:
            print("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng nh√¢n vi√™n!")
            return

        found = False  # Ki·ªÉm tra xem c√≥ nh√¢n vi√™n n√†o kh·ªõp kh√¥ng

        for row in range(self.tableWidgetEmployee.rowCount()):
            item = self.tableWidgetEmployee.item(row, 1)  # C·ªôt 1 l√† "H·ªç v√† T√™n"
            if item:
                emp_name = item.text().strip().lower()
                match = search_text in emp_name
                self.tableWidgetEmployee.setRowHidden(row, not match)
                if match:
                    found = True  # ƒê√°nh d·∫•u t√¨m th·∫•y √≠t nh·∫•t m·ªôt nh√¢n vi√™n

        if not found:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o kh·ªõp v·ªõi: {search_text}")

    def load_employee_data(self):
        """Load danh s√°ch nh√¢n vi√™n t·ª´ DataConnector v√†o QTableWidget"""
        employees = self.dc.get_all_employees()  # L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ JSON

        if not employees:  # N·∫øu employees l√† None ho·∫∑c r·ªóng
            print("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n!")
            return

        self.tableWidgetEmployee.setRowCount(len(employees))  # C·∫≠p nh·∫≠t s·ªë d√≤ng trong b·∫£ng
        self.tableWidgetEmployee.setColumnCount(6)  # Hi·ªÉn th·ªã 6 c·ªôt c·∫ßn thi·∫øt
        self.tableWidgetEmployee.setHorizontalHeaderLabels(
            ["ID", "H·ªç v√† T√™n", "Ng√†y sinh", "S·ªë ƒëi·ªán tho·∫°i", "V·ªã tr√≠", "Ng√†y v√†o l√†m"]
        )

        for row, emp in enumerate(employees):
            self.tableWidgetEmployee.setItem(row, 0, QTableWidgetItem(str(emp.id)))
            self.tableWidgetEmployee.setItem(row, 1, QTableWidgetItem(emp.name))
            self.tableWidgetEmployee.setItem(row, 2, QTableWidgetItem(emp.date_of_birth))
            self.tableWidgetEmployee.setItem(row, 3, QTableWidgetItem(emp.phone_number))
            self.tableWidgetEmployee.setItem(row, 4, QTableWidgetItem(emp.position))
            self.tableWidgetEmployee.setItem(row, 5, QTableWidgetItem(emp.start_working_date))

    def add_employee(self):
        """M·ªü c·ª≠a s·ªï nh·∫≠p nh√¢n vi√™n, ki·ªÉm tra l·ªói, l∆∞u v√†o JSON v√† c·∫≠p nh·∫≠t QTableWidget"""

        prev_data = {
            "id": "", "name": "", "dob": "", "phone": "",
            "position": "", "start_date": "", "type": "Full-time"
        }

        while True:
            dialog = QDialog(self.MainWindow)
            dialog.setWindowTitle("Th√™m Nh√¢n Vi√™n M·ªõi")
            dialog.setFixedSize(400, 350)
            dialog.setStyleSheet("background-color: white;")

            layout = QVBoxLayout(dialog)
            form_layout = QFormLayout()

            id_input = QLineEdit(prev_data["id"])
            name_input = QLineEdit(prev_data["name"])
            dob_input = QLineEdit(prev_data["dob"])
            phone_input = QLineEdit(prev_data["phone"])

            position_input = QComboBox()
            position_input.addItems(["Ph·ª•c v·ª•", "Thu ng√¢n", "Pha ch·∫ø"])
            position_input.setCurrentText(prev_data["position"])

            start_date_input = QLineEdit(prev_data["start_date"])
            emp_type_input = QComboBox()
            emp_type_input.addItems(["Full-time", "Part-time"])
            emp_type_input.setCurrentText(prev_data["type"])

            form_layout.addRow("M√£ nh√¢n vi√™n:", id_input)
            form_layout.addRow("H·ªç v√† t√™n:", name_input)
            form_layout.addRow("Ng√†y sinh (YYYY-MM-DD):", dob_input)
            form_layout.addRow("S·ªë ƒëi·ªán tho·∫°i:", phone_input)
            form_layout.addRow("V·ªã tr√≠:", position_input)
            form_layout.addRow("Ng√†y v√†o l√†m (YYYY-MM-DD):", start_date_input)
            form_layout.addRow("Lo·∫°i nh√¢n vi√™n:", emp_type_input)

            save_button = QPushButton("Th√™m")
            save_button.clicked.connect(dialog.accept)

            layout.addLayout(form_layout)
            layout.addWidget(save_button)
            dialog.setLayout(layout)

            if dialog.exec() == 0:
                return  # Ng∆∞·ªùi d√πng ƒë√≥ng form

            emp_id = id_input.text().strip()
            emp_name = name_input.text().strip()
            emp_dob = dob_input.text().strip()
            emp_phone = phone_input.text().strip()
            emp_position = position_input.currentText()
            emp_start_date = start_date_input.text().strip()
            emp_type = emp_type_input.currentText()

            prev_data = {
                "id": emp_id, "name": emp_name, "dob": emp_dob, "phone": emp_phone,
                "position": emp_position, "start_date": emp_start_date, "type": emp_type
            }

            errors = []

            if not emp_id:
                errors.append("M√£ nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            if not emp_name or any(char.isdigit() for char in emp_name):
                errors.append("H·ªç v√† t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.")
            if not emp_phone.isdigit() or len(emp_phone) < 10:
                errors.append("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·ª©a s·ªë v√† t·ªëi thi·ªÉu 9 ch·ªØ s·ªë.")
            date_pattern = r"^\d{4}-\d{2}-\d{2}$"
            if not re.match(date_pattern, emp_dob):
                errors.append("Ng√†y sinh kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng ƒë√∫ng: YYYY-MM-DD.")
            if not re.match(date_pattern, emp_start_date):
                errors.append("Ng√†y v√†o l√†m kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng ƒë√∫ng: YYYY-MM-DD.")

            # ‚úÖ ƒê·ªçc danh s√°ch nh√¢n vi√™n t·ª´ JSON
            jff = JsonFileFactory()
            employees_data = jff.read_data("../datasets/employees.json", dict)  # ƒê·ªçc JSON d∆∞·ªõi d·∫°ng dict

            employees = []
            for data in employees_data:
                emp_class = FullTimeEmployee if data.get("employee_type",
                                                         "Full-time") == "Full-time" else PartTimeEmployee
                valid_params = emp_class.__init__.__code__.co_varnames
                filtered_data = {k: v for k, v in data.items() if k in valid_params}
                employees.append(emp_class(**filtered_data))

            if any(emp.id == emp_id for emp in employees):
                errors.append("M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn m√£ kh√°c.")

            if errors:
                self.show_warning("\n".join(errors))
                continue  # Quay l·∫°i v√≤ng l·∫∑p nh·∫≠p l·∫°i

            # ‚úÖ T·∫°o nh√¢n vi√™n m·ªõi
            emp_class = FullTimeEmployee if emp_type == "Full-time" else PartTimeEmployee
            valid_params = emp_class.__init__.__code__.co_varnames
            new_employee_data = {
                "id": emp_id, "name": emp_name, "date_of_birth": emp_dob,
                "phone_number": emp_phone, "position": emp_position,
                "employee_type": emp_type, "start_working_date": emp_start_date
            }
            new_employee = emp_class(**{k: v for k, v in new_employee_data.items() if k in valid_params})

            employees.append(new_employee)
            jff.write_data(employees, "../datasets/employees.json")

            self.load_employee_data()
            self.show_information("Nh√¢n vi√™n m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m!")
            break

    def show_schedule_dialog(self):
        """Hi·ªÉn th·ªã dialog x·∫øp l·ªãch v·ªõi n√∫t ch·ªçn ng√†y b·∫Øt ƒë·∫ßu & k·∫øt th√∫c"""
        dialog = QDialog(self.MainWindow)
        dialog.setWindowTitle("X·∫øp L·ªãch Nh√¢n Vi√™n")
        dialog.setFixedSize(500, 600)
        dialog.setStyleSheet("background-color: white;")

        layout = QVBoxLayout()

        # Nh·∫≠p ID Nh√¢n vi√™n
        label_id = QLabel("M√£ NV:")
        input_id = QLineEdit()
        layout.addWidget(label_id)
        layout.addWidget(input_id)

        # Nh·∫≠p T√™n Nh√¢n vi√™n
        label_name = QLabel("T√™n NV:")
        input_name = QLineEdit()
        layout.addWidget(label_name)
        layout.addWidget(input_name)

        # Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu
        btn_start_date = QPushButton("Ch·ªçn Ng√†y B·∫Øt ƒê·∫ßu")
        label_start_date = QLabel("--/--/----")
        layout.addWidget(QLabel("Ng√†y B·∫Øt ƒê·∫ßu:"))
        layout.addWidget(btn_start_date)
        layout.addWidget(label_start_date)

        # Ch·ªçn ng√†y k·∫øt th√∫c
        btn_end_date = QPushButton("Ch·ªçn Ng√†y K·∫øt Th√∫c")
        label_end_date = QLabel("--/--/----")
        layout.addWidget(QLabel("Ng√†y K·∫øt Th√∫c:"))
        layout.addWidget(btn_end_date)
        layout.addWidget(label_end_date)

        # T·∫°o b·∫£ng l·ªãch l√†m vi·ªác
        shifts = ["S√°ng", "Tr∆∞a", "Chi·ªÅu", "T·ªëi"]
        days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
        table_schedule = QTableWidget(len(shifts), len(days))
        table_schedule.setVerticalHeaderLabels(shifts)
        table_schedule.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        table_schedule.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # Th√™m checkbox v√†o b·∫£ng
        for i in range(len(shifts)):
            for j in range(len(days)):
                cell_widget = QWidget()
                layout_hbox = QHBoxLayout(cell_widget)
                checkbox = QCheckBox()
                layout_hbox.addWidget(checkbox)
                layout_hbox.setAlignment(Qt.AlignCenter)
                layout_hbox.setContentsMargins(0, 0, 0, 0)
                cell_widget.setLayout(layout_hbox)
                table_schedule.setCellWidget(i, j, cell_widget)

        layout.addWidget(table_schedule)

        # N√∫t L∆∞u & H·ªßy
        btn_layout = QHBoxLayout()
        btn_confirm = QPushButton("L∆∞u L·ªãch")
        btn_cancel = QPushButton("H·ªßy")
        btn_layout.addWidget(btn_confirm)
        btn_layout.addWidget(btn_cancel)
        layout.addLayout(btn_layout)

        table_schedule.setStyleSheet("background-color: white; gridline-color: black;")
        input_id.setStyleSheet("background-color: white;")
        input_name.setStyleSheet("background-color: white;")
        label_start_date.setStyleSheet("background-color: white;")
        label_end_date.setStyleSheet("background-color: white;")

        dialog.setLayout(layout)

        # ----- X·ª≠ l√Ω ch·ªçn ng√†y -----
        def choose_date(label, is_start):
            """M·ªü l·ªãch ch·ªçn ng√†y"""
            calendar_dialog = QDialog(dialog)
            calendar_dialog.setWindowTitle("Ch·ªçn Ng√†y")
            calendar_dialog.setFixedSize(300, 250)

            vbox = QVBoxLayout()
            calendar = QCalendarWidget()
            btn_ok = QPushButton("Ch·ªçn")

            vbox.addWidget(calendar)
            vbox.addWidget(btn_ok)
            calendar_dialog.setLayout(vbox)

            def set_date():
                selected_date = calendar.selectedDate()
                date_str = selected_date.toString("yyyy-MM-dd")
                label.setText(selected_date.toString("dd/MM/yyyy"))
                if is_start:
                    global start_date_str
                    start_date_str = date_str
                else:
                    global end_date_str
                    end_date_str = date_str
                update_table_headers()
                calendar_dialog.accept()

            btn_ok.clicked.connect(set_date)
            calendar_dialog.exec_()

        btn_start_date.clicked.connect(lambda: choose_date(label_start_date, True))
        btn_end_date.clicked.connect(lambda: choose_date(label_end_date, False))

        # ----- C·∫≠p nh·∫≠t header c·ªßa b·∫£ng -----
        def update_table_headers():
            """C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ c·ªßa QTableWidget (Th·ª© + Ng√†y)"""
            if "start_date_str" in globals() and start_date_str:
                start_date = QDate.fromString(start_date_str, "yyyy-MM-dd")
                for i in range(len(days)):
                    current_date = start_date.addDays(i)
                    table_schedule.setHorizontalHeaderItem(i, QTableWidgetItem(
                        f"{days[i]}\n{current_date.toString('dd/MM')}"))

        # X·ª≠ l√Ω l∆∞u d·ªØ li·ªáu
        def save_schedule():
            """L∆∞u l·ªãch l√†m vi·ªác v√†o file Excel"""
            import pandas as pd
            import os

            employee_id = input_id.text().strip()
            employee_name = input_name.text().strip()

            if not employee_id or not employee_name:
                QMessageBox.warning(dialog, "L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß M√£ NV v√† T√™n NV!")
                return

            if "start_date_str" not in globals() or "end_date_str" not in globals():
                QMessageBox.warning(dialog, "L·ªói", "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c!")
                return

            file_path = f"../datasets/Schedule ({start_date_str}).xlsx"

            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i hay kh√¥ng
            if os.path.exists(file_path):
                with pd.ExcelFile(file_path) as xls:
                    sheets = {sheet: pd.read_excel(xls, sheet_name=sheet) for sheet in xls.sheet_names}
            else:
                sheets = {}

            # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ checkbox
            has_data = False  # Bi·∫øn ki·ªÉm tra xem c√≥ d·ªØ li·ªáu kh√¥ng

            for j in range(len(days)):
                date_of_day = QDate.fromString(start_date_str, "yyyy-MM-dd").addDays(j).toString("dd-MM")
                sheet_name = f"{days[j]} - {date_of_day}"

                shifts_worked = []
                for i in range(len(shifts)):
                    cell = table_schedule.cellWidget(i, j)
                    checkbox = cell.findChild(QCheckBox) if cell else None
                    shifts_worked.append("X" if checkbox and checkbox.isChecked() else "")

                if any(shifts_worked):  # Ch·ªâ l∆∞u n·∫øu c√≥ ca l√†m
                    has_data = True  # ƒê√°nh d·∫•u c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u
                    if sheet_name in sheets:
                        df = sheets[sheet_name]
                    else:
                        df = pd.DataFrame(columns=["ID Nh√¢n Vi√™n", "T√™n Nh√¢n Vi√™n", "S√°ng", "Tr∆∞a", "Chi·ªÅu", "T·ªëi"])

                    existing_entry = df[df["ID Nh√¢n Vi√™n"] == employee_id]
                    if not existing_entry.empty:
                        index = existing_entry.index[0]
                        df.loc[index, "S√°ng":"T·ªëi"] = shifts_worked
                    else:
                        df.loc[len(df)] = [employee_id, employee_name] + shifts_worked

                    sheets[sheet_name] = df

                    # Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi ghi
                    print(f"üìå D·ªØ li·ªáu sheet {sheet_name}:")
                    print(df)

            if not has_data:
                QMessageBox.warning(dialog, "L·ªói", "Kh√¥ng c√≥ d·ªØ li·ªáu ca l√†m n√†o ƒë∆∞·ª£c ch·ªçn!")
                return

            # Ghi l·∫°i v√†o file Excel
            try:
                with pd.ExcelWriter(file_path, engine="xlsxwriter") as writer:
                    for sheet_name, df in sheets.items():
                        df.to_excel(writer, sheet_name=sheet_name, index=False)

                QMessageBox.information(dialog, "Th√†nh c√¥ng", f"L·ªãch l√†m vi·ªác ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {file_path}!")
                print(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c l∆∞u: {file_path}")
                dialog.close()
            except Exception as e:
                self.show_warning(f"L·ªói khi l∆∞u file: {str(e)}")
                print(f"‚ùå L·ªói khi l∆∞u file: {str(e)}")

        btn_confirm.clicked.connect(save_schedule)
        btn_cancel.clicked.connect(dialog.close)
        dialog.exec_()

    def delete_employee(self):
        """X√≥a nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn kh·ªèi b·∫£ng v√† JSON"""
        selected_row = self.tableWidgetEmployee.currentRow()
        if selected_row == -1:
            self.show_warning("Vui l√≤ng ch·ªçn m·ªôt nh√¢n vi√™n ƒë·ªÉ x√≥a!")
            return

        reply = self.show_question("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y?")

        if reply == QMessageBox.StandardButton.Yes:
            # L·∫•y ID c·ªßa nh√¢n vi√™n t·ª´ b·∫£ng
            employee_id = self.tableWidgetEmployee.item(selected_row, 0).text()

            # ƒê·ªçc danh s√°ch nh√¢n vi√™n t·ª´ JSON
            employees = self.dc.get_all_employees()
            if employees is None:
                employees = []

            # L·ªçc danh s√°ch nh√¢n vi√™n ƒë·ªÉ lo·∫°i b·ªè nh√¢n vi√™n c√≥ ID tr√πng kh·ªõp
            employees = [emp for emp in employees if emp.id != employee_id]

            # L∆∞u l·∫°i danh s√°ch m·ªõi v√†o JSON
            try:
                jff = JsonFileFactory()
                filename = "../datasets/employees.json"
                jff.write_data(employees, filename)
            except Exception as e:
                self.show_warning(f"L·ªói khi l∆∞u file JSON: {str(e)}")
                return

            # X√≥a d√≤ng kh·ªèi b·∫£ng
            self.tableWidgetEmployee.removeRow(selected_row)

            self.show_information(" Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a!")

    def fill_table_widget(self, data):
        self.tableWidgetChamCong.setRowCount(len(data))
        self.tableWidgetChamCong.setColumnCount(len(data.columns))
        self.tableWidgetChamCong.setHorizontalHeaderLabels(data.columns)

        for row_idx, row_data in data.iterrows():
            for col_idx, value in enumerate(row_data):
                self.tableWidgetChamCong.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

    def load_attendance_data(self):
        """ Ch·ªçn file Excel, ƒë·ªçc d·ªØ li·ªáu, v√† hi·ªÉn th·ªã l√™n tableWidgetChamCong """
        file_path, _ = QFileDialog.getOpenFileName(
            self.MainWindow,
            "Ch·ªçn file Excel ch·∫•m c√¥ng",
            "",
            "Excel Files (*.xlsx *.xls)"
        )

        if not file_path:
            return

        # ƒê·ªçc file Excel
        xls = pd.ExcelFile(file_path)
        print(f"ƒê·ªçc file: {file_path}, c√°c sheet: {xls.sheet_names}")

        # X√°c ƒë·ªãnh c√°c c·ªôt ng√†y/th·ª© t·ª´ t√™n sheet
        sheet_columns = xls.sheet_names  # M·ªói sheet l√† m·ªôt ng√†y -> D√πng l√†m ti√™u ƒë·ªÅ c·ªôt

        # Danh s√°ch l∆∞u th√¥ng tin ch·∫•m c√¥ng
        data_list = []

        # Duy·ªát t·ª´ng sheet ƒë·ªÉ l·∫•y d·ªØ li·ªáu
        for sheet_name in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet_name)

            # Ki·ªÉm tra xem file c√≥ ƒë·ªß c·ªôt kh√¥ng
            required_columns = ["ID Nh√¢n Vi√™n", "T√™n Nh√¢n Vi√™n"]
            for col in required_columns:
                if col not in df.columns:
                    print(f"L·ªói: C·ªôt {col} kh√¥ng t·ªìn t·∫°i trong sheet {sheet_name}")
                    return

            # Duy·ªát t·ª´ng nh√¢n vi√™n
            for _, row in df.iterrows():
                id_nv = row["ID Nh√¢n Vi√™n"]
                ten_nv = row["T√™n Nh√¢n Vi√™n"]

                # Lu√¥n t·∫°o ƒë·ªß 4 d√≤ng cho m·ªói nh√¢n vi√™n (S√°ng, Tr∆∞a, Chi·ªÅu, T·ªëi)
                for ca in ["S√°ng", "Tr∆∞a", "Chi·ªÅu", "T·ªëi"]:
                    data_list.append([id_nv, ten_nv, ca] + [""] * len(sheet_columns))  # C·ªôt ng√†y/th·ª© ƒë·ªÉ tr·ªëng

        # Hi·ªÉn th·ªã d·ªØ li·ªáu l√™n tableWidgetChamCong
        self.tableWidgetChamCong.setRowCount(len(data_list))
        self.tableWidgetChamCong.setColumnCount(3 + len(sheet_columns))  # 3 c·ªôt (ID, T√™n, Ca) + c·ªôt ng√†y/th·ª©

        # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ c·ªôt
        headers = ["ID Nh√¢n Vi√™n", "T√™n Nh√¢n Vi√™n", "Ca"] + sheet_columns  # L·∫•y t√™n sheet l√†m ti√™u ƒë·ªÅ c·ªôt
        self.tableWidgetChamCong.setHorizontalHeaderLabels(headers)

        # ƒêi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng
        for row_idx, row_data in enumerate(data_list):
            for col_idx, value in enumerate(row_data):
                self.tableWidgetChamCong.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

        print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng v√†o b·∫£ng!")

    def update_attendance_status(self, row, column):
        if column < 3:  # Ch·∫∑n ƒë·ªïi m√†u ·ªü 3 c·ªôt ƒë·∫ßu ti√™n
            return

        item = self.tableWidgetChamCong.item(row, column)
        if item is None:
            item = QTableWidgetItem()
            self.tableWidgetChamCong.setItem(row, column, item)

        # Danh s√°ch m√†u theo tr·∫°ng th√°i
        colors = ["#FFFFFF", "#00FF00", "#FFFF00", "#FF0000"]  # Tr·∫Øng, Xanh l√°, V√†ng, ƒê·ªè

        # L·∫•y m√†u hi·ªán t·∫°i (n·∫øu √¥ ch∆∞a c√≥ m√†u, ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† tr·∫Øng)
        current_color = item.background().color().name().upper()

        # Debug: In ra m√†u hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra
        print(f"Row {row}, Column {column}, Current Color: {current_color}")

        # Ki·ªÉm tra n·∫øu m√†u hi·ªán t·∫°i kh√¥ng c√≥ trong danh s√°ch, g√°n m·∫∑c ƒë·ªãnh l√† tr·∫Øng
        if current_color not in colors:
            current_color = colors[0]  # Tr·∫Øng

        # X√°c ƒë·ªãnh m√†u ti·∫øp theo
        next_index = (colors.index(current_color) + 1) % len(colors)
        next_color = colors[next_index]

        # ƒê·ªïi m√†u
        item.setBackground(QColor(next_color))

        # Debug: In m√†u ti·∫øp theo ƒë·ªÉ ki·ªÉm tra
        print(f"Next Color: {next_color}")

    def save_attendance_to_excel(self):
        """L∆∞u d·ªØ li·ªáu b·∫£ng ch·∫•m c√¥ng v√†o file Excel, kh√¥ng b·ªã l·∫∑p nh√¢n vi√™n."""

        # H·ªôp tho·∫°i ch·ªçn file import tr∆∞·ªõc ƒë√≥
        file_path, _ = QFileDialog.getOpenFileName(
            parent=None,
            caption="Ch·ªçn file Excel ƒë√£ import",
            dir="",
            filter="Excel Files (*.xlsx *.xls)"
        )

        if not file_path:
            print("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.")
            return

        # L·∫•y t√™n file g·ªëc ƒë·ªÉ ƒë·∫∑t t√™n file l∆∞u
        file_name = os.path.basename(file_path)
        file_name = file_name.replace("Schedule", "Check_schedule")
        save_path = os.path.join("../datasets", file_name)

        if not save_path.endswith(".xlsx"):
            save_path += ".xlsx"

        # L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng
        rows = self.tableWidgetChamCong.rowCount()
        cols = self.tableWidgetChamCong.columnCount()

        headers = ["ID Nh√¢n Vi√™n", "T√™n Nh√¢n Vi√™n", "Ca"] + \
                  [self.tableWidgetChamCong.horizontalHeaderItem(i).text() for i in range(3, cols)]

        color_map = {
            "#FFFFFF": "",
            "#00FF00": "ƒêi l√†m",
            "#FFFF00": "Ngh·ªâ c√≥ ph√©p",
            "#FF0000": "Ngh·ªâ kh√¥ng ph√©p"
        }

        data = []
        seen_ids = set()  # Tr√°nh l·∫∑p nh√¢n vi√™n

        for row in range(0, rows, 4):
            id_nv = self.tableWidgetChamCong.item(row, 0).text() if self.tableWidgetChamCong.item(row, 0) else ""
            ten_nv = self.tableWidgetChamCong.item(row, 1).text() if self.tableWidgetChamCong.item(row, 1) else ""

            # Ki·ªÉm tra n·∫øu ID ƒë√£ ƒë∆∞·ª£c ghi th√¨ b·ªè qua (tr√°nh ghi l·∫°i nh√¢n vi√™n)
            if id_nv in seen_ids:
                continue
            seen_ids.add(id_nv)

            for i, ca in enumerate(["S√°ng", "Tr∆∞a", "Chi·ªÅu", "T·ªëi"]):
                row_data = [id_nv, ten_nv, ca]
                for col in range(3, cols):
                    item = self.tableWidgetChamCong.item(row + i, col)
                    if item:
                        cell_color = item.background().color().name().upper()
                        cell_value = color_map.get(cell_color, "")
                        row_data.append(cell_value)
                    else:
                        row_data.append("")
                data.append(row_data)

        df = pd.DataFrame(data, columns=headers)
        df.to_excel(save_path, index=False, engine='openpyxl')

        print(f"‚úÖ ƒê√£ l∆∞u file ch·∫•m c√¥ng t·∫°i: {save_path}")

############################################################################
######################## Qu·∫£n l√Ω doanh thu ###3#############################
    def show_chart_by_month(self):
        try:
            excel_path = "../datasets/doanh_thu_theo_thang.xlsx"
            df = pd.read_excel(excel_path)

            if df.empty:
                print("D·ªØ li·ªáu th√°ng r·ªóng.")
                return

            df["Th√°ng/NƒÉm"] = df["Th√°ng/NƒÉm"].astype(str)
            df = df.sort_values(by="Th√°ng/NƒÉm")

            if not self.frame_bieudo1.layout():
                self.frame_bieudo1.setLayout(QVBoxLayout())

            layout = self.frame_bieudo1.layout()
            while layout.count():
                item = layout.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()

            fig, ax = plt.subplots(figsize=(10, 5), facecolor="#f8f9fa")
            bars = ax.bar(df["Th√°ng/NƒÉm"], df["T·ªïng doanh thu (VNƒê)"],
                          color="#5A67D8", width=0.6)

            ax.set_title("üîµ Doanh thu theo th√°ng", fontsize=14, fontweight='bold', color="#333")
            ax.set_xlabel("Th√°ng/NƒÉm", fontsize=12, color="#555")
            ax.set_ylabel("T·ªïng doanh thu (VNƒê)", fontsize=12, color="#555")
            ax.tick_params(axis='x', rotation=45, labelsize=10)
            ax.tick_params(axis='y', labelsize=10)
            ax.grid(axis="y", linestyle="--", alpha=0.5)

            # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n t·ª´ng c·ªôt
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f"{height:,.0f}",
                            xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 5), textcoords="offset points",
                            ha='center', fontsize=9, color="#333")

            canvas = FigureCanvas(fig)
            layout.addWidget(canvas)

        except Exception as e:
            print(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì th√°ng: {e}")

    def show_chart_by_week(self):
        try:
            excel_path = "../datasets/doanh_thu_theo_tuan_chuan.xlsx"
            df = pd.read_excel(excel_path)

            if df.empty:
                print("D·ªØ li·ªáu tu·∫ßn r·ªóng.")
                return

            df["Tu·∫ßn/Th√°ng/NƒÉm"] = df["Tu·∫ßn/Th√°ng/NƒÉm"].astype(str)
            df = df.sort_values(by="Tu·∫ßn/Th√°ng/NƒÉm")

            if not self.frame_bieudo.layout():
                self.frame_bieudo.setLayout(QVBoxLayout())

            layout = self.frame_bieudo.layout()
            while layout.count():
                item = layout.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()

            fig, ax = plt.subplots(figsize=(12, 5), facecolor="#f8f9fa")
            ax.plot(df["Tu·∫ßn/Th√°ng/NƒÉm"], df["T·ªïng doanh thu (VNƒê)"],
                    color="#E76F51", marker='o', linewidth=2)

            ax.set_title("üü† Doanh thu theo tu·∫ßn (trong t·ª´ng th√°ng)", fontsize=14,
                         fontweight='bold', color="#333")
            ax.set_xlabel("Tu·∫ßn/Th√°ng/NƒÉm", fontsize=12, color="#555")
            ax.set_ylabel("T·ªïng doanh thu (VNƒê)", fontsize=12, color="#555")
            ax.tick_params(axis='x', rotation=45, labelsize=10)
            ax.tick_params(axis='y', labelsize=10)
            ax.grid(axis="y", linestyle="--", alpha=0.5)

            # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n t·ª´ng ƒëi·ªÉm
            for i, value in enumerate(df["T·ªïng doanh thu (VNƒê)"]):
                ax.annotate(f"{value:,.0f}", (i, value),
                            textcoords="offset points", xytext=(0, 5),
                            ha='center', fontsize=9, color="#333")

            canvas = FigureCanvas(fig)
            layout.addWidget(canvas)

        except Exception as e:
            print(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì tu·∫ßn: {e}")

    def display_total_customers(self):
        """ ƒê·ªçc d·ªØ li·ªáu v√† hi·ªÉn th·ªã t·ªïng kh√°ch h√†ng l√™n frameCustomer """
        try:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
            with open("../datasets/customers.json", "r", encoding="utf-8") as f:
                data = json.load(f)

            total_customers = len(data)

            # --- Layout ch√≠nh ---
            main_layout = QHBoxLayout()
            main_layout.setContentsMargins(0, 0, 0, 0)
            main_layout.setSpacing(0)

            # --- Thanh m√†u xanh b√™n tr√°i ---
            left_bar = QFrame()
            left_bar.setFixedWidth(10)
            left_bar.setStyleSheet(
                "background-color: #4A90E2; border-top-left-radius: 16px; border-bottom-left-radius: 16px;")

            # --- Layout ph·∫ßn ch·ªØ ---
            text_layout = QVBoxLayout()
            text_layout.setContentsMargins(16, 16, 16, 16)
            text_layout.setSpacing(10)

            title_label = QLabel("Customers")
            title_label.setFont(QFont("Segoe UI", 15, QFont.Normal))
            title_label.setStyleSheet("color: #000000;")

            number_label = QLabel(f"{total_customers:,}")
            number_label.setFont(QFont("Segoe UI", 25, QFont.Bold))
            number_label.setStyleSheet("color: #000000;")

            text_layout.addWidget(title_label)
            text_layout.addWidget(number_label)
            text_layout.addStretch()

            text_container = QWidget()
            text_container.setLayout(text_layout)

            # --- Icon kh√°ch h√†ng b√™n ph·∫£i ---
            icon_label = QLabel()
            icon_label.setFixedSize(50, 50)
            icon_label.setPixmap(
                QPixmap("../images/customer_icon.png").scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            icon_label.setAlignment(Qt.AlignCenter)

            # --- Th√™m v√†o layout ch√≠nh ---
            main_layout.addWidget(left_bar)
            main_layout.addWidget(text_container, 1)
            main_layout.addWidget(icon_label)

            # --- X√≥a layout c≈© n·∫øu c√≥ ---
            if self.frameCustomer.layout():
                old_layout = self.frameCustomer.layout()
                while old_layout.count():
                    child = old_layout.takeAt(0)
                    if child.widget():
                        child.widget().deleteLater()

            self.frameCustomer.setLayout(main_layout)

            # --- Style: bo g√≥c, n·ªÅn trong su·ªët, kh√¥ng vi·ªÅn ---
            self.frameCustomer.setStyleSheet("""
                QFrame {
                    background-color: transparent;
                    border-radius: 16px;
                    border: none;
                }
                QLabel {
                    background: transparent;
                }
            """)

        except Exception as e:
            print("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu kh√°ch h√†ng:", e)

    def bill(self):
        """ ƒê·ªçc d·ªØ li·ªáu v√† hi·ªÉn th·ªã t·ªïng kh√°ch h√†ng l√™n frameInvoice """
        try:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
            with open("../datasets/customers.json", "r", encoding="utf-8") as f:
                data = json.load(f)

            total_customers = len(data)

            # --- Layout ch√≠nh ---
            main_layout = QHBoxLayout()
            main_layout.setContentsMargins(0, 0, 0, 0)
            main_layout.setSpacing(0)

            # --- Thanh m√†u xanh b√™n tr√°i ---
            left_bar = QFrame()
            left_bar.setFixedWidth(10)
            left_bar.setStyleSheet(
                "background-color: #4A90E2; border-top-left-radius: 16px; border-bottom-left-radius: 16px;")

            # --- Layout ph·∫ßn ch·ªØ ---
            text_layout = QVBoxLayout()
            text_layout.setContentsMargins(16, 16, 16, 16)
            text_layout.setSpacing(4)

            title_label = QLabel("Invoices")
            title_label.setFont(QFont("Segoe UI", 15, QFont.Normal))
            title_label.setStyleSheet("color: #000000;")

            number_label = QLabel(f"{total_customers:,}")
            number_label.setFont(QFont("Segoe UI", 25, QFont.Bold))
            number_label.setStyleSheet("color: #000000;")

            text_layout.addWidget(title_label)
            text_layout.addWidget(number_label)
            text_layout.addStretch()

            text_container = QWidget()
            text_container.setLayout(text_layout)

            # --- Icon kh√°ch h√†ng b√™n ph·∫£i ---
            icon_label = QLabel()
            icon_label.setFixedSize(40, 40)
            icon_label.setPixmap(
                QPixmap("../images/bill_icon.png").scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            icon_label.setAlignment(Qt.AlignCenter)

            # --- Th√™m v√†o layout ch√≠nh ---
            main_layout.addWidget(left_bar)
            main_layout.addWidget(text_container, 1)
            main_layout.addWidget(icon_label)

            # --- X√≥a layout c≈© n·∫øu c√≥ ---
            if self.frameInvoices.layout():
                old_layout = self.frameInvoices.layout()
                while old_layout.count():
                    child = old_layout.takeAt(0)
                    if child.widget():
                        child.widget().deleteLater()

            self.frameInvoices.setLayout(main_layout)

            # --- Style: bo g√≥c, n·ªÅn trong su·ªët, kh√¥ng vi·ªÅn ---
            self.frameInvoices.setStyleSheet("""
                QFrame {
                    background-color: transparent;
                    border-radius: 16px;
                    border: none;
                }
                QLabel {
                    background: transparent;
                }
            """)

        except Exception as e:
            print("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu kh√°ch h√†ng:", e)

    def display_total_revenue(self):
        """ ƒê·ªçc d·ªØ li·ªáu v√† hi·ªÉn th·ªã t·ªïng doanh thu l√™n frameRevenue """
        try:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
            with open("../datasets/customers.json", "r", encoding="utf-8") as f:
                data = json.load(f)

            # T√≠nh t·ªïng doanh thu
            total_revenue = sum(customer.get("total_payment", 0) for customer in data)

            # --- Layout ch√≠nh ---
            main_layout = QHBoxLayout()
            main_layout.setContentsMargins(0, 0, 0, 0)
            main_layout.setSpacing(0)

            # --- Thanh m√†u xanh b√™n tr√°i ---
            left_bar = QFrame()
            left_bar.setFixedWidth(10)
            left_bar.setStyleSheet(
                "background-color: #4A90E2; border-top-left-radius: 16px; border-bottom-left-radius: 16px;")

            # --- Layout ph·∫ßn ch·ªØ ---
            text_layout = QVBoxLayout()
            text_layout.setContentsMargins(16, 16, 16, 16)
            text_layout.setSpacing(4)

            title_label = QLabel("Total Revenue")
            title_label.setFont(QFont("Segoe UI", 15, QFont.Normal))
            title_label.setStyleSheet("color: #000000;")

            number_label = QLabel(f"{total_revenue:,.0f} VND")
            number_label.setFont(QFont("Segoe UI", 25, QFont.Bold))
            number_label.setStyleSheet("color: #000000;")

            text_layout.addWidget(title_label)
            text_layout.addWidget(number_label)
            text_layout.addStretch()

            text_container = QWidget()
            text_container.setLayout(text_layout)

            # --- Icon ti·ªÅn b√™n ph·∫£i ---
            icon_label = QLabel()
            icon_label.setFixedSize(40, 40)
            icon_label.setPixmap(
                QPixmap("../images/revenue_icon.png").scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            icon_label.setAlignment(Qt.AlignCenter)

            # --- Th√™m v√†o layout ch√≠nh ---
            main_layout.addWidget(left_bar)
            main_layout.addWidget(text_container, 1)
            main_layout.addWidget(icon_label)

            # --- X√≥a layout c≈© n·∫øu c√≥ ---
            if self.frameRevenue.layout():
                old_layout = self.frameRevenue.layout()
                while old_layout.count():
                    child = old_layout.takeAt(0)
                    if child.widget():
                        child.widget().deleteLater()

            self.frameRevenue.setLayout(main_layout)

            # --- Style: bo g√≥c, n·ªÅn trong su·ªët, kh√¥ng vi·ªÅn ---
            self.frameRevenue.setStyleSheet("""
                QFrame {
                    background-color: transparent;
                    border-radius: 16px;
                    border: none;
                }
                QLabel {
                    background: transparent;
                }
            """)

        except Exception as e:
            print("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu doanh thu:", e)

    def load_bieudo(self):
        if not self.frame_bieudo1.layout():
            self.frame_bieudo1.setLayout(QVBoxLayout())














